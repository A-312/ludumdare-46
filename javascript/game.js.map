{"version":3,"sources":["javascript/main.js","javascript/entites/girl.js","javascript/entites/gulls.js","javascript/entites/turtles.js","javascript/utils/utils.js"],"names":["WIDTH","HEIGHT","groundRectangle","Phaser","Geom","Rectangle","config","type","AUTO","width","height","parent","pixelArt","backgroundColor","input","gamepad","physics","default","arcade","debug","scene","preload","create","update","game","Game","entities","loops","scenes","this","load","image","spritesheet","frameWidth","frameHeight","add","setOrigin","setAlpha","girl","Girl","gulls","Gulls","turtles","Turtles","spawn","cursors","keyboard","createCursorKeys","push","loop","zone","setSize","world","enable","collider","overlap","score","text","color","fontSize","label","value","numturtle","on","go1","go2","body1","body2","isTurtle","isGull","texture","key","anims","play","flipX","x","isAttacked","deltaX","expectedX","expectedY","y","Math","round","isTweenEnable","tweens","targets","props","duration","ease","complete","onComplete","stop","forEach","apply","getChildren","length","setText","frames","generateFrameNumbers","frameRate","yoyo","repeat","sprite","setScale","setOffset","setCollideWorldBounds","body","setBoundsRectangle","group","quantity","addListener","anim","lastframe","gameobject","destroy","emitter","particles","createEmitter","speed","life","scale","start","end","angle","min","max","blendMode","setTimeout","immovable","useDamping","setDrag","gr","collideWorldBounds","customBoundsRectangle","rand","floor","random","prototype","c","left","isDown","setVelocityX","right","up","setVelocityY","down","inputGamepad","total","localStorage","num_gamepad","names","i","gamepads","id","message","rep","prompt","join","isNaN","navigator","getGamepads","vibrationActuator","playEffect","startDelay","weakMagnitude","strongMagnitude","e","pad","getPad","axes","axisH","getValue","axisV","console","error","clear","depth","setVelocity","entitie","onOverlap","rect","Actions","RandomRectangle","velocity","delta","touching","none","waitToWalk","Date","wasTouching"],"mappings":"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","file":"../../game/javascript/game.js","sourcesContent":["const WIDTH = 800\nconst HEIGHT = 600\n\nconst groundRectangle = new Phaser.Geom.Rectangle(0, HEIGHT - 200, WIDTH - 72, 200) // eslint-disable-line no-unused-vars\n\nconst config = {\n  type: Phaser.AUTO,\n  width: WIDTH,\n  height: HEIGHT,\n  parent: 'phaser',\n  pixelArt: true,\n  backgroundColor: '#76EEFE',\n  input: {\n    gamepad: true\n  },\n  physics: {\n    default: 'arcade',\n    arcade: {\n      debug: false\n    }\n  },\n  scene: {\n    preload: preload,\n    create: create,\n    update: update\n  }\n}\n\nconst game = new Phaser.Game(config)\nlet scene // eslint-disable-line no-unused-vars\n\nconst entities = {}\nconst loops = []\n\nfunction preload() {\n  scene = game.scene.scenes[0]\n\n  this.load.image('ground', 'res/ground.png')\n  this.load.image('grid', 'res/grid.png')\n\n  this.load.spritesheet('girl_walk', 'res/girl_walk.png', { frameWidth: 32, frameHeight: 64 })\n  this.load.spritesheet('girl_handle', 'res/girl_handle.png', { frameWidth: 32, frameHeight: 64 })\n\n  this.load.spritesheet('gull_fly', 'res/gull_fly.png', { frameWidth: 64, frameHeight: 64 })\n  this.load.spritesheet('gull_handle', 'res/gull_handle.png', { frameWidth: 64, frameHeight: 64 })\n  this.load.spritesheet('gull_eating', 'res/gull_eating.png', { frameWidth: 64, frameHeight: 64 })\n\n  this.load.spritesheet('turtle_born', 'res/turtle_born.png', { frameWidth: 32, frameHeight: 32 })\n  this.load.spritesheet('turtle_walk', 'res/turtle_walk.png', { frameWidth: 32, frameHeight: 32 })\n  this.load.spritesheet('turtle_fear', 'res/turtle_fear.png', { frameWidth: 32, frameHeight: 32 })\n  this.load.spritesheet('turtle_dead', 'res/turtle_dead.png', { frameWidth: 32, frameHeight: 32 })\n  this.load.spritesheet('turtle[50]_fear', 'res/turtle50_fear.png', { frameWidth: 32, frameHeight: 32 })\n  this.load.spritesheet('turtle_eated', 'res/turtle_eated.png', { frameWidth: 32, frameHeight: 32 })\n\n  this.load.image('white', 'res/particles/white.png')\n}\n\nfunction create() {\n  this.add.image(0, HEIGHT - 243, 'ground').setOrigin(0)\n  if (config.physics.arcade.debug)\n    this.add.image(0, HEIGHT - 300, 'grid').setOrigin(0).setAlpha(0.5)\n\n  const girl = new Girl(128, 444)\n  const gulls = new Gulls()\n  const turtles = new Turtles()\n\n  gulls.spawn()\n  turtles.spawn()\n\n  entities.cursors = this.input.keyboard.createCursorKeys()\n  loops.push(girl.loop)\n  loops.push(gulls.loop)\n  loops.push(turtles.loop)\n\n  entities.zone = this.add.zone(WIDTH + 32, HEIGHT - 200).setSize(200, 200).setOrigin(0)\n  this.physics.world.enable(entities.zone)\n\n  this.physics.add.collider(entities.girl, [entities.turtles, entities.gulls])\n  this.physics.add.collider(entities.turtles)//, entities.gulls)\n  this.physics.add.overlap(entities.turtles, entities.gulls)\n  this.physics.add.overlap(entities.turtles, entities.zone)\n\n  entities.score = this.add.text(5, HEIGHT - 25, '', { color: 'white', fontSize: 24 }).setOrigin(0)\n  entities.score.label = 'Score: '\n  entities.score.value = 0\n  entities.numturtle = this.add.text(5, 5, '', { color: 'white', fontSize: 24 }).setOrigin(0)\n  entities.numturtle.label = 'Turtle in danger: '\n\n  this.physics.world.on('overlap', (go1, go2, body1, body2) => {\n    if (go1.isTurtle && go2.isGull && go2.texture.key !== 'gull_flying') {\n      go2.anims.play('gull_eating', true)\n      go2.flipX = (go1.x > go2.x)\n\n      if (go1.texture.key !== 'turtle_eated')\n      go1.anims.play('turtle[50]_fear', true)\n      go1.isAttacked = true\n\n      const deltaX = (go2.flipX ? (go1.width / 2 - 4) : -go1.width / 2 - 6)\n      const expectedX = go1.x - deltaX\n      const expectedY = go1.y - (go2.height - go1.height) / 2 - 5\n\n      if ((Math.round(expectedY) !== Math.round(go2.y) ||\n          Math.round(expectedX) !== Math.round(go2.x)) &&\n          !go2.isTweenEnable) {\n        go2.isTweenEnable = true\n        const tweens = this.tweens.add({\n          targets: go2,\n          props: {\n            x: { value: expectedX },\n            y: { value: expectedY }\n          },\n          duration: 300,\n          ease: 'linear',\n          complete: 500,\n          onComplete: () => {\n            go1.anims.play('turtle_eated', true)\n            go2.isTweenEnable = false\n\n            tweens.stop()\n          }\n        })\n      }\n    }\n  })\n\n  /* entities.gull.push(this.add.sprite(750, 300, 'gull_fly'))//.setScale(1.5)\n\n  this.tweens.add({\n      targets: entities.gull[0],\n      props: {\n          x: { value: -200, flipX: true },\n          y: { value: 300 },\n      },\n      duration: 4000,\n      ease: 'Sine.easeInOut'\n  })\n\n  entities.gull[0].anims.load('fly')\n  entities.gull[0].anims.play('fly') */\n\n/*\n  mysprite = this.add.image(32, 32, 'gull_fly', '__BASE').setOrigin(0)\n  entities.gull = mysprite.animations.add('gull_fly')\n\n  this.animations.play('gull_fly', 30, true)\n\n  entities.gull.setVelocity(200, 0)\n  entities.gull.body.allowGravity = false */\n}\n\nfunction update() {\n  loops.forEach((loop) => loop.apply(this))\n\n  if (!entities.turtles.getChildren().length) {\n    const gulls = new Gulls()\n    const turtles = new Turtles()\n\n    gulls.spawn()\n    turtles.spawn()\n\n    this.physics.add.collider(entities.girl, [entities.turtles, entities.gulls])\n    this.physics.add.collider(entities.turtles)//, entities.gulls)\n    this.physics.add.overlap(entities.turtles, entities.gulls)\n    this.physics.add.overlap(entities.turtles, entities.zone)\n  }\n\n  entities.score.setText(entities.score.label + entities.score.value)\n  entities.numturtle.setText(entities.numturtle.label + entities.turtles.getChildren().length)\n}\n","function Girl(x, y) {\n  scene.anims.create({\n    key: 'girl_walk',\n    frames: scene.anims.generateFrameNumbers('girl_walk'),\n    frameRate: 4,\n    yoyo: true,\n    repeat: -1\n  })\n\n  scene.anims.create({\n    key: 'girl_handle',\n    frames: scene.anims.generateFrameNumbers('girl_handle'),\n    frameRate: 0.2,\n    yoyo: true,\n    repeat: -1\n  })\n\n  entities.girl = scene.physics.add.sprite(x, y, 'girl_handle').setScale(2)\n  entities.girl.setSize(12, 8).setOffset(12, 56)\n  entities.girl.setCollideWorldBounds(true)\n  entities.girl.body.setBoundsRectangle(groundRectangle)\n\n  entities.girl.anims.play('girl_handle')\n}\n\nGirl.prototype.loop = function() {\n  let c = false\n\n  if (entities.cursors.left.isDown) {\n    entities.girl.setVelocityX(-200)\n    entities.girl.play('girl_walk', true)\n    entities.girl.flipX = true\n    c = true\n  } else if (entities.cursors.right.isDown) {\n    entities.girl.setVelocityX(200)\n    entities.girl.play('girl_walk', true)\n    entities.girl.flipX = false\n    c = true\n  }\n\n  if (entities.cursors.up.isDown) {\n    entities.girl.setVelocityY(-200)\n    entities.girl.play('girl_walk', true)\n    c = true\n  } else if (entities.cursors.down.isDown) {\n    entities.girl.setVelocityY(200)\n    entities.girl.play('girl_walk', true)\n    c = true\n  }\n\n  try {\n    const inputGamepad = this.input.gamepad\n    const total = inputGamepad.total\n    if (total !== 0) {\n      if (total > 1 && !('num_gamepad' in entities)) {\n        if ('num_gamepad' in localStorage) {\n          entities.num_gamepad = +localStorage.num_gamepad\n        } else {\n          const names = []\n          for (var i = 0; i < total; i++) {\n            names.push(i + ') ' + inputGamepad.gamepads[i].id)\n          }\n          const message = `We detect ${total} gamepads, which do you want to use? `\n          const rep = +prompt(message + `num (0-${total - 1}):\\n` + names.join('\\n'))\n          entities.num_gamepad = (isNaN(rep) || rep <= 0 || rep > total) ? 0 : rep\n        }\n\n        try {\n          navigator.getGamepads()[entities.num_gamepad].vibrationActuator.playEffect('dual-rumble', {\n            startDelay: 0,\n            duration: 200,\n            weakMagnitude: 0.2,\n            strongMagnitude: 0.4\n          })\n        } catch (e) {}\n      } else {\n        entities.num_gamepad = 0\n      }\n\n      const pad = inputGamepad.getPad(entities.num_gamepad)\n\n      if (pad.axes.length) {\n        const axisH = pad.axes[0].getValue()\n        const axisV = pad.axes[1].getValue()\n\n        if (axisH !== 0 || axisV !== 0) {\n          entities.girl.flipX = (axisH < 0)\n          entities.girl.play('girl_walk', true)\n\n          entities.girl.setVelocityX(200 * axisH)\n          entities.girl.setVelocityY(200 * axisV)\n\n          c = true\n        }\n      }\n    }\n  } catch (e) {\n    console.error('gamepad things', e)\n    localStorage.clear('num_gamepad')\n  }\n\n  entities.girl.depth = entities.girl.y + entities.girl.height\n\n  if (!c) {\n    entities.girl.setVelocity(0)\n    entities.girl.play('girl_handle', true)\n  }\n}\n","function Gulls() {\n  scene.anims.create({\n    key: 'gull_fly',\n    frames: scene.anims.generateFrameNumbers('gull_fly'),\n    frameRate: 30,\n    yoyo: true,\n    repeat: -1\n  })\n\n  scene.anims.create({\n    key: 'gull_eating',\n    frames: scene.anims.generateFrameNumbers('gull_eating'),\n    frameRate: 20,\n    yoyo: true,\n    repeat: -1\n  })\n\n  scene.anims.create({\n    key: 'gull_handle',\n    frames: scene.anims.generateFrameNumbers('gull_handle'),\n    frameRate: 0.2,\n    yoyo: true,\n    repeat: -1\n  })\n\n  entities.gulls = scene.physics.add.group({\n    key: 'gull_handle',\n    quantity: 8\n  })\n}\n\nGulls.prototype.spawn = function() {\n  entities.gulls.getChildren().forEach((entitie) => {\n    entitie.isGull = true\n    entitie.setSize(48, 32).setOffset(8, 32)\n    entitie.body.onOverlap = true\n  })\n\n  const gr = groundRectangle\n\n  const rect = new Phaser.Geom.Rectangle(gr.x + 320, gr.y, gr.width - 320, gr.height - 32)\n  Phaser.Actions.RandomRectangle(entities.gulls.getChildren(), rect)\n\n  entities.gulls.getChildren().forEach((entitie) => {\n    if (entitie.x < 500) {\n      entitie.flipX = true\n    }\n    entitie.anims.play('gull_handle')\n  })\n}\n\nGulls.prototype.loop = function() {\n  entities.gulls.getChildren().forEach((entitie) => {\n    const velocity = entitie.body.velocity\n    if (entitie.y >= HEIGHT - 200) {\n      if ((velocity.x !== 0 || velocity.y !== 0)) {\n        entitie.play('gull_fly', true)\n        entitie.flipX = (velocity.x > 0 || (entitie.flipX && velocity.x === 0)) // = don't turn\n        if (velocity.y < 20) {\n          velocity.y = -200\n          velocity.x /= 2\n        }\n      }\n      if (velocity.y > 0) {\n        velocity.y *= -1\n      }\n    }\n\n    if (entitie.texture.key !== 'gull_fly') {\n      entitie.depth = entitie.y + entitie.height / 2\n    }\n  })\n}\n","function Turtles() {\n  scene.anims.create({\n    key: 'turtle_walk',\n    frameRate: 1.3,\n    frames: scene.anims.generateFrameNumbers('turtle_walk'),\n    repeat: -1\n  })\n  scene.anims.create({\n    key: 'turtle_fear',\n    frameRate: 1,\n    frames: scene.anims.generateFrameNumbers('turtle_fear'),\n    repeat: -1\n  })\n  scene.anims.create({\n    key: 'turtle[50]_fear',\n    frameRate: 1,\n    frames: scene.anims.generateFrameNumbers('turtle[50]_fear'),\n    repeat: -1\n  })\n  scene.anims.create({\n    key: 'turtle_dead',\n    frameRate: 1,\n    frames: scene.anims.generateFrameNumbers('turtle_dead'),\n    repeat: -1\n  })\n  scene.anims.create({\n    key: 'turtle_eated',\n    frameRate: 1,\n    frames: scene.anims.generateFrameNumbers('turtle_eated'),\n    yoyo: false,\n    repeat: 0\n  }).addListener('complete', (anim, lastframe, gameobject) => {\n    const dead = scene.physics.add.sprite(gameobject.x, gameobject.y, 'turtle_dead')\n    entities.score.value -= 200\n    gameobject.destroy()\n  })\n\n  scene.anims.create({\n    key: 'turtle_born',\n    frames: scene.anims.generateFrameNumbers('turtle_born'),\n    frameRate: 5,\n    repeat: 0\n  }).addListener('complete', (anim, lastframe, gameobject) => {\n    const particles = scene.add.particles('white')\n\n    const emitter = particles.createEmitter({\n      speed: 100,\n      life: 500,\n      scale: {\n        start: 0.5,\n        end: 0\n      },\n      angle: {\n        min: 0,\n        max: 360\n      },\n      x: gameobject.x,\n      y: gameobject.y,\n      blendMode: 'ADD'\n    })\n\n    setTimeout(() => {\n      gameobject.play('turtle_walk')\n      gameobject.setSize(0, 8).setOffset(0, 24)\n      gameobject.body.immovable = false\n      gameobject.body.useDamping = true\n      gameobject.body.setDrag(0.9)\n      emitter.stop()\n    }, 100)\n  })\n\n  const gr = groundRectangle\n\n  entities.turtles = scene.physics.add.group({\n    collideWorldBounds: true,\n    customBoundsRectangle: new Phaser.Geom.Rectangle(gr.x + 32, gr.y, WIDTH + 200, gr.height),\n    key: 'turtle_walk',\n    quantity: 4,\n    immovable: true\n  })\n}\n\nTurtles.prototype.spawn = function() {\n  const gr = groundRectangle\n\n  entities.turtles.getChildren().forEach((entitie) => {\n    entitie.isTurtle = true\n  })\n  const rect = new Phaser.Geom.Rectangle(gr.x + 32, gr.y, 280, gr.height - 20)\n\n  Phaser.Actions.RandomRectangle(entities.turtles.getChildren(), rect)\n\n  entities.turtles.getChildren().forEach((entitie) => {\n    entitie.anims.play('turtle_born')\n  })\n}\n\nTurtles.prototype.loop = function() {\n  entities.turtles.getChildren().forEach((entitie) => {\n    let delta = 0\n    entitie.depth = entitie.y\n    const velocity = entitie.body.velocity\n    if (velocity.x <= 5 && entitie.texture.key === 'turtle_walk') {\n      velocity.x = 10 * (entitie.flipX ? -1 : 1)\n    }\n    if (entitie.isAttacked) {\n      delta = -10\n    } else if (!entitie.body.touching.none) {\n      entitie.play('turtle_fear', true)\n      entitie.waitToWalk = +new Date() + 2000\n      if (entitie.body.touching.right) {\n        entitie.flipX = true\n      } else if (entitie.body.touching.left) {\n        entitie.flipX = false\n      }\n    } else if (entitie.waitToWalk < +new Date()) {\n      entitie.play('turtle_walk', true)\n    }\n\n    entitie.depth = entitie.y + entitie.height / 2 + delta\n  })\n\n  if (!entities.zone.body.touching.none && entities.zone.body.wasTouching.none) {\n    try {\n      navigator.getGamepads()[entities.num_gamepad].vibrationActuator.playEffect('dual-rumble', {\n        startDelay: 0,\n        duration: 1000,\n        weakMagnitude: 0.5,\n        strongMagnitude: 1.0\n      })\n    } catch (e) {}\n\n    entities.turtles.getChildren().forEach((entitie) => {\n      if (WIDTH <= entitie.x) {\n        entities.score.value += 100\n        entitie.destroy()\n      }\n    })\n  }\n}\n","function rand(max) { // eslint-disable-line no-unused-vars\n  return Math.floor(Math.random() * max)\n}\n"]}